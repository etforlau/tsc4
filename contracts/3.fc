{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another va
  lue. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

() recv_internal() {
}
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP"; 
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
forall X -> tuple cons(X head, tuple tail) asm "CONS";
(int) ubitsize (int a) asm "UBITSIZE";

(int, int) SeparateBits(int num, int len1, int len2){
    int first_bit_mask = ( 1 << len1 ) - 1;
    int second_bits_mask = ( 1 << len2 ) - 1;
    int part1 = ( num >> len2 ) & first_bit_mask;
    int part2 = num & second_bits_mask;
    return  (part1, part2);
}


global builder b;
global int RemainingBits;

(tuple, int) AddBits(tuple stack_res, int lenStack, int newBits, int len){
    ;;builder b = stack_res~list_next();
    ;;int ReamainingBits = 1023 - b.builder_bits();
    if ( RemainingBits >= len ){
        b~store_uint(newBits, len);
        RemainingBits -= len; 
        ;;    stack_res = b.cons(stack_res);
    } else {
        int n1 = 0;
        int n2 = 0;
        (n1, n2) = SeparateBits(newBits,RemainingBits, len - RemainingBits);
        b~store_uint(n1, RemainingBits);
        stack_res = b.cons(stack_res);
        b = begin_cell().store_uint(n2, len - RemainingBits);
        ;;RemBits = 1023 - (len - RemBits)
        RemainingBits += 1023 - len;
        ;;builder newBuilder = begin_cell().store_uint(n2, len - ReamainingBits);
        ;;stack_res = newBuilder.cons(stack_res);
        lenStack += 1;
    }
    return (stack_res , lenStack);
}



tuple cdr(tuple list) asm "CDR";
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
    ;; ~dump(value);
    tuple stack_res = null();
    ;;builder bldr = begin_cell();
    ;;stack_res = begin_cell().cons(stack_res);
    int StackLen = 0;
    tuple stack = null();
    int flag_length = ubitsize(flag);
    int value_length = ubitsize(value);
    
    stack~push_back(linked_list);
    slice prev_slice = begin_cell().end_cell().begin_parse();

    b = begin_cell();
    RemainingBits = 1023;


    while (~ stack.is_null()) {
      slice curr_slice = stack~pop_back().begin_parse();
      
      if (curr_slice.slice_refs()) {
        stack~push_back(curr_slice~load_ref());
      }
      
      int curr_processed = 0;
      int prev_processed = 0;
      int curr_slice_size = curr_slice.slice_bits();
      int prev_slice_size = prev_slice.slice_bits();
      
      while (~ curr_slice.slice_empty?()) {

        while (~ prev_slice.slice_empty?()) {
          int prev_read = prev_slice.preload_uint(prev_slice_size - prev_processed);
          int read_curr = curr_slice.preload_uint(flag_length - (prev_slice_size - prev_processed));
          
          int read = (prev_read << ( flag_length - (prev_slice_size - prev_processed) ) ) + read_curr;
          
          if (read == flag){
            prev_slice~skip_bits(prev_slice_size - prev_processed);
            curr_slice~skip_bits(flag_length - (prev_slice_size - prev_processed));
            
            curr_processed += (flag_length - (prev_slice_size - prev_processed));

            (stack_res, StackLen) = AddBits(stack_res, StackLen, value, value_length);
          } else {
            prev_processed += 1;
            
            (stack_res, StackLen) = AddBits(stack_res, StackLen, prev_slice~load_uint(1), 1);
          }
        }
                  
        if (flag_length <= curr_slice_size - curr_processed){
          int read = curr_slice.preload_uint(flag_length);
          
          if (read == flag){
            curr_processed += flag_length;
            curr_slice~skip_bits(flag_length);

            (stack_res, StackLen) = AddBits(stack_res, StackLen, value, value_length);
          } else {
            curr_processed += 1;
            
            (stack_res, StackLen) = AddBits(stack_res, StackLen, curr_slice~load_uint(1), 1);
          }
        } else {
          prev_slice = curr_slice;
          curr_slice~skip_bits(curr_slice_size - curr_processed);
        }
      }
    }
    
    int prev_slice_size = prev_slice.slice_bits();
    if (prev_slice_size != 0){
      (stack_res, StackLen) = AddBits(stack_res, StackLen, prev_slice~load_uint(prev_slice_size), prev_slice_size);
    }

    if (b.builder_bits() != 0){
        stack_res = b.cons(stack_res);
        StackLen += 1;
    }
    if (StackLen  == 0){
        return begin_cell().end_cell();
    }
    
    cell temp = null();
    if (StackLen == 1){
        builder bldr = stack_res~list_next();
        cell result = bldr.end_cell();
        return result;
    }
    while (StackLen != 1){
        StackLen -= 1;
        if (temp.is_null()) {
            temp = stack_res~list_next().end_cell();
        } else {
            cell newCell = stack_res~list_next().store_ref(temp).end_cell();
            temp = newCell;
        }
    }
    cell result = stack_res~list_next().store_ref(temp).end_cell();

    return result;
}