{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}
forall X -> int is_null (X x) asm "ISNULL";
(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";
forall X -> (tuple, X) list_next(tuple list) asm( -> 1 0) "UNCONS";
(slice) encrypt (slice s, int shift_amount) {
  builder str = begin_cell();
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    if ( (char >= 97) & (char <= 122)) {
      str~store_uint(((char - 97 + shift_amount) % 26) + 97, 8);
    } else {
      if (((char >= 65) & (char <= 90))){
        str~store_uint(((char - 65 + shift_amount) % 26) + 65, 8);
      } else {
        str~store_uint(char, 8);
      }
    }
  }
  return str.end_cell().begin_parse();
}

(slice) decrypt (slice s, int shift_amount) {
  builder str = begin_cell();
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    if ( (char >= 97) & (char <= 122)) {
      str~store_uint(((char - 97 - shift_amount) % 26) + 97, 8);
    } else {
      if (((char >= 65) & (char <= 90))){
        str~store_uint(((char - 65 - shift_amount) % 26) + 65, 8);
      } else {
        str~store_uint(char, 8);
      }
    }
  }
  return str.end_cell().begin_parse();
}

(cell) stringTail(tuple stack_res, int numSlices){

  cell temp = null();
  if (numSlices == 1){
    slice sl = stack_res~list_next();
    return begin_cell().store_uint(0, 32).store_slice(sl).end_cell();
  }
  while (numSlices != 1){
    numSlices -= 1;
    if (temp.is_null()) {
      slice slc = stack_res~list_next();
      temp = begin_cell().store_slice(slc).end_cell();
    } else {
      cell newCell = begin_cell().store_slice(stack_res~list_next()).store_ref(temp).end_cell();
      temp = newCell;
    }
  }
  cell result = begin_cell().store_uint(0,32).store_slice(stack_res~list_next()).store_ref(temp).end_cell();
  return result;
}

;; testable
;; testable
forall X -> tuple cons(X head, tuple tail) asm "CONS";
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {

  int shift_amount = shift % 26;

  tuple stack_res = null();

  tuple stack = null();

  stack~push_back(text);

  int b = 0;
  int numSlices = 0;
  while (~ stack.is_null()) {

    slice s = stack~pop_back().begin_parse();
    if (b == 0){
      s~skip_bits(32);
      b += 1;
    }
    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }
    slice s_encr = encrypt(s, shift_amount);
    stack_res = s_encr.cons(stack_res);
    numSlices += 1;
    ;;    stack_res~cons(temp);
  }
  return stringTail(stack_res, numSlices);

}


;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {

  int shift_amount = shift % 26;

  tuple stack_res = null();

  tuple stack = null();

  stack~push_back(text);

  int b = 0;
  int numSlices = 0;
  while (~ stack.is_null()) {

    slice s = stack~pop_back().begin_parse();
    if (b == 0){
      s~skip_bits(32);
      b += 1;
    }
    repeat (s.slice_refs()) {
      stack~push_back(s~load_ref());
    }
    slice s_encr = decrypt(s, shift_amount);
    stack_res = s_encr.cons(stack_res);
    numSlices += 1;
    ;;    stack_res~cons(temp);
  }
  return stringTail(stack_res, numSlices);

}

