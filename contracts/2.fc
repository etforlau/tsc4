{-
  TAScounter3 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

() recv_internal() {
}

;; testable
(int) tlen (tuple t) asm "TLEN";
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
  if ((matrixA.tlen() == 0) | (matrixB.tlen() == 0)) {
    return empty_tuple();
  }
  int a_rows = matrixA.tlen();
  int b_rows = matrixB.tlen();
  int a_cols = matrixA.at(0).tlen();
  int b_cols = matrixB.at(0).tlen();
  if (b_rows != a_cols){
    return empty_tuple();
  }
  tuple res = empty_tuple();
  int counter1 = 0;
  while ( counter1 < a_rows ) {
    tuple rows_t = empty_tuple();
    int counter2 = 0;
    while (counter2 < b_cols) {
      int cell_val = 0;
      int counter3 = 0;
      while (counter3 < a_cols){
        cell_val += matrixA.at(counter1).at(counter3) * matrixB.at(counter3).at(counter2);
        counter3 += 1;
      }
      rows_t~tpush(cell_val);
      counter2 += 1;
    }
    res~tpush(rows_t);
    counter1 += 1;
  }
  return res;
}

